# Hint
# 1. find all the contraints
# 2. Find all the requirements from evaluation script, for example the output
# 3. Design the matrix weights carefully to achieve the results
# 4. Think logically, not to waste time

import numpy as np

np.random.seed(31)

spec = {
    "vertices": {
        "input": {
            "num_nodes": 13,
            "activation": lambda x: x,
            "bias": 0
        },
        "memory_in0": {
            "num_nodes": 13,
            "activation": lambda x: x,
            "bias": 0
        },
        "h0": {
            "num_nodes": 13,
            "activation": lambda x: np.maximum(x, 0),
            "bias": 0
        },
        "h1": {
            "num_nodes": 13,
            "activation": lambda x: x,
            "bias": 0
        },
        "h2": {
            "num_nodes": 2,
            "activation": lambda x: x,
            "bias": 0
        },
        "h3": {
            "num_nodes": 13,
            "activation": lambda x: np.maximum(x, 0),
            "bias": 0
        },
        "h4": {
            "num_nodes": 13,
            "activation": lambda x: np.maximum(x, 0),
            "bias": 0
        },
        "memory_out0": {
            "num_nodes": 13,
            "activation": lambda x: np.maximum(x, 0),
            "bias": 0
        },
        "output": {
            "num_nodes": 1,
            "activation": lambda x: x,
            "bias": 0
        }
    },
    "edges": [
        { # w1 -- if "not" clear all very and adj
            "source_id": "memory_in0",
            "target_id": "h0",
            "weights": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, -100, -100, -100, -100, -100, -100, -100],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
                                 )
        },
        { # w2 keep
            "source_id": "input",
            "target_id": "h0",
            "weights": np.identity(13)
        },
        { # w3 keep adj and remove other values if adj is not appearing
            "source_id": "h0",
            "target_id": "h3",
            "weights": np.array([[-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [-100, -100, -100, -100, -100, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
                                 )
        },
        { # w4 keep the number of veries only
            "source_id": "memory_in0",
            "target_id": "h3",
            "weights": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
                                 )
        },
        { # w5 keep the number of adjs and with veries
            "source_id": "h3",
            "target_id": "h4",
            "weights": np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
                                 [0, 0, 0, 0, 0, 0, 0, 1, -100, -100, -100, -100, -100],
                                 [0, 0, 0, 0, 0, 0, 0, -100, 1, -100, -100, -100, -100],
                                 [0, 0, 0, 0, 0, 0, 0, -100, -100, 1, -100, -100, -100],
                                 [0, 0, 0, 0, 0, 0, 0, -100, -100, -100, 1, -100, -100],
                                 [0, 0, 0, 0, 0, 0, 0, -100, -100, -100, -100, 1, -100],
                                 [0, 0, 0, 0, 0, 0, 0, -100, -100, -100, -100, -100, 1]]
                                 )
        },
        { # w12 keep
            "source_id": "h4",
            "target_id": "h1",
            "weights": np.identity(13)
        },
        {  # w6 -- keep
            "source_id": "memory_in0",
            "target_id": "h1",
            "weights": np.identity(13)
        },
        {  # w7 -- keep (very, not, others) not adjs
            "source_id": "h0",
            "target_id": "h1",
            "weights": np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
                                 )
        },
        { # w8 if not effective, clear not and very and other with zeros;
          # if others: keep zeros
            "source_id": "input",
            "target_id": "memory_out0",
            "weights": np.array([[0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
                                 )
        },
        {  # w9 -- keep
            "source_id": "h1",
            "target_id": "memory_out0",
            "weights": np.identity(13)
        },
        {  # w10 -- feature lower dimension -- keep only positives and negatives
            "source_id": "h1",
            "target_id": "h2",
            "weights": np.array([[0, 0],
                                 [0, 0],
                                 [0, 0],
                                 [0, 0],
                                 [0, 0],
                                 [0, 0],
                                 [0, 0],
                                 [1, 0],
                                 [1, 0],
                                 [1, 0],
                                 [0, 1],
                                 [0, 1],
                                 [0, 1]]
                                 )
        },
        {  # w11 -- only pos and neg remains
            "source_id": "h2",
            "target_id": "output",
            "weights": np.array([[1],
                                 [-1]])
        },
    ],
    "input": "input",
    "output": "output",
    "memories": {
        "memory_in0": "memory_out0"
    }
}
